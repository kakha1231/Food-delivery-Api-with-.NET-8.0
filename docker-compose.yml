services:
  
  redis:
    image: redis:latest
    healthcheck:
      test: ["CMD-SHELL", "redis-cli ping | grep PONG"]
      interval: 15s
      timeout: 5s
      retries: 3
    networks:
      - backend
    ports:
      - "6379:6379"  
    volumes:
      - redis_data:/data
         
  
  rabbitmq:
    image: rabbitmq:3-management
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 20s
      timeout: 10s
      retries: 3
    container_name: RabbitMQ
    networks:
      - backend
    ports:
      - "5672:5672"          # RabbitMQ main port
      - "15672:15672"        # RabbitMQ management UI
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    restart: always
    
  consul:
    image : hashicorp/consul:latest
    container_name: Consul
    restart: on-failure
    networks: 
      - backend
    ports:
      - "8500:8500"
  
  apigateway:
    container_name: ApiGateway
    build:
      context: .
      dockerfile: ApiGateway/Dockerfile
    restart: on-failure
    depends_on:
      consul:
        condition: service_started
    networks:
      - backend
    ports:
      - "5298:5298"

  
  userservice:
    container_name: UserService
    build:
      context: .
      dockerfile: UserService/Dockerfile
    depends_on:
      rabbitmq:
        condition: service_healthy
      consul:
        condition: service_started
    restart: on-failure
    networks:
      - backend
    ports:
      - "5038:5038"
  
  restaurantservice:
    container_name: RestaurantService
    build:
      context: .
      dockerfile: RestaurantService/Dockerfile
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
    depends_on:
      rabbitmq:
        condition: service_healthy
      consul:
        condition: service_started
    restart: on-failure
    networks:
      - backend
    ports:
      - "5048:5048"
  
  orderservice:
    container_name: OrderService
    build:
      context: .
      dockerfile: OrderService/Dockerfile
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
    depends_on: 
      rabbitmq:
        condition: service_healthy
      consul:
        condition: service_started
    restart: on-failure
    networks:
      - backend
    ports:
      - "5058:5058"
      
  courierservice :
    container_name: CourierService
    build:
      context: .
      dockerfile: CourierService/Dockerfile
    depends_on:
      rabbitmq:
        condition: service_healthy
      consul:
        condition: service_started
    restart: on-failure
    networks:
      - backend
    ports:
      - "5068:5068"
 
        
networks: 
  backend :
    driver: bridge
    
volumes:
  redis_data:
    driver: local